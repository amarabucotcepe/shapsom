from io import StringIO
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit.components.v1 as components
import plotly.express as px
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
import branca.colormap as cm
from branca.colormap import linear
from PIL import Image
import folium
import json
from streamlit_folium import st_folium
import weasyprint
import kaleido
import matplotlib.pyplot as plt
import globals
import plotly.graph_objects as go
from my_utils import add_cabecalho
import base64
from pypdf import PdfMerger
from capa import criar_capa
import locale
from datetime import datetime
import geopandas as gpd

import os

def juntar_pdfs(pdfs):
  merger = PdfMerger()
  for pdf in pdfs:
      merger.append(pdf)

  nome = 'An√°lise Estat√≠stica Explorat√≥ria.pdf'
  merger.write(nome)
  merger.close()

def html_to_png(html_file, output_png):
            # Configura√ß√£o do WebDriver (neste caso, estou usando o Chrome)
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            driver = webdriver.Chrome(options=chrome_options)
            
            driver.set_window_size(600, 350)

            # Carrega o arquivo HTML no navegador
            caminho_atual = os.getcwd()
            caminho_html = os.path.join(caminho_atual, html_file)
            driver.get("file:///" + caminho_html)

            # Espera um pouco para garantir que o HTML seja totalmente carregado
            time.sleep(2)

            # Captura a tela e salva como um arquivo PNG
            driver.save_screenshot(output_png)

            # Fecha o navegador
            driver.quit()

def pagina_analise_estatistica_exploratoria():
    st.title("Sistema de Apoio a Auditorias do Tribunal de Contas do Estado üìä")
    st.subheader("An√°lise Estat√≠stica Explorat√≥ria")

    has_databases = True
    try:
        has_databases = has_databases and globals.current_database is not None
    except:
        has_databases = False

    if has_databases:

        html = f"""<!DOCTYPE html>
            <html lang="en">
                <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                @media print {{
                @page {{
                    margin-top: 1.5in;
                    size: A4;
                }}
                }}

                body {{
                    font-family: "Helvetica";
                    font-weight: bold;
                    font-size: 12px;
                }}

                header {{
                    text-align: left;
                    margin-top: 0px; /* Espa√ßo superior */
                }}

                .table-text {{
                    text-align: justify; /* Alinha o texto com justifica√ß√£o */
                    margin-bottom: 10px; /* Margem para alinhamento com as extremidades da p√°gina */
                    font-size: 12px;
                }}

                /* Define o tamanho da tabela */
                table {{
                    width: 50vw; /* 50% da largura da viewport */
                    height: calc(297mm / 2); /* Metade da altura de uma folha A4 */
                    border: 1px solid black; /* Borda da tabela */
                    border-collapse: collapse; /* Colapso das bordas da tabela */
                }}
                /* Estilo das c√©lulas */
                td, th {{
                    border: 1px solid black; /* Borda das c√©lulas */
                    padding: 4px; /* Espa√ßamento interno das c√©lulas */
                    text-align: center; /* Alinhamento do texto */
                    font-size: 12px; /* Tamanho da fonte */
                }}


                .mensagem {{
                    text-align: center; /* Centraliza o texto */
                }}

                .texto-clusters {{
                    font-size: 12px; /* Tamanho do texto */
                }}

                .evitar-quebra-pagina {{
                    page-break-inside: avoid; /* Evita quebra de p√°gina dentro do bloco */
                }}

                .legenda-tabela {{
                    font-size: 10px;
                    font-style: italic;
                    color: blue;
                }}

                .legenda-mapa {{
                    font-size: 10px;
                    font-style: italic;
                    color: blue;
                    page-break-after: always;
                }}

                </style>
                </head>

                <body>
                <header>
                    <h1>An√°lise Estat√≠stica Explorat√≥ria</h1>
                </header>
                
                <div class="evitar-quebra-pagina">
                </div>


                ---===---


                </body>

                </html>
                """

        html_clusters = ''

        df =  globals.current_database
        st.subheader('Mapa de An√°lise da Vari√°vel Alvo')

        st.markdown('''O mapa de an√°lise da vari√°vel alvo apresenta uma an√°lise geoespacial dos munic√≠pios do estado de Pernambuco. As diferentes tonalidades de cores no 
                    mapa representam as varia√ß√µes nos n√≠veis da vari√°vel de escolha. As √°reas em tons mais escuros indicam um desempenho superior, 
                    enquanto as √°reas em tons mais claros refletem um desempenho inferior. Esta visualiza√ß√£o detalhada √© crucial para identificar regi√µes que necessitam de 
                    interven√ß√µes mais intensivas, ajudando a direcionar pol√≠ticas p√∫blicas e recursos de forma mais eficiente.''')
 
        with st.expander('Visualizar mapa de An√°lise da Vari√°vel Alvo', expanded=True):
            def generate_map():
                # Convert the DataFrame to a GeoDataFrame
                gdf = gpd.read_file('PE_Municipios_2022.zip')
                gdf = gdf.merge(df[[df.columns[0],df.columns[-1]]], left_on='NM_MUN', right_on=df.columns[0])

                fig, ax = plt.subplots(1, 1)

                df[df.columns[-1]] = df[df.columns[-1]].round(2)

                bounds = gdf.total_bounds  # Get the bounds of the data
                center = [(bounds[1] + bounds[3]) / 2, (bounds[0] + bounds[2]) / 2]
                m = gdf.explore(df.columns[-1], cmap='RdBu', fit_bounds=True, map_kwds={'location': center, 'zoom_start':4})

                components.html(m._repr_html_(), height=400)

                outfp = r"mapa.html"

                m.save(outfp)

            with st.spinner('Gerando mapa...'):
                if os.path.exists('mapa.html'):
                    m_repr_html_ = open('mapa.html').read()
                    components.html(m_repr_html_, height=600)
                else:
                    generate_map()

            st.info(f'Figura 1 - Mapa Colorido Baseado na Varia√ß√£o de Valores da Vari√°vel Alvo.')

        check_mapa = st.checkbox('Gostaria de adicionar o Mapa de An√°lise da Vari√°vel Alvo ao relat√≥rio?')
        if check_mapa:
            html_to_png(f'mapa.html', f'mapa.png')
            caminho_atual = os.getcwd()
            caminho_mapa = os.path.join(caminho_atual,f"mapa.png")
            html_clusters += '<h2> Mapa de An√°lise de Vari√°vel </h2>'
            html_clusters += '''<p> O mapa de an√°lise da vari√°vel alvo apresenta uma an√°lise geoespacial dos munic√≠pios do estado de Pernambuco. As diferentes tonalidades de cores no 
                                    mapa representam as varia√ß√µes nos n√≠veis da vari√°vel de escolha. As √°reas em tons mais escuros indicam um desempenho superior, 
                                    enquanto as √°reas em tons mais claros refletem um desempenho inferior. Esta visualiza√ß√£o detalhada √© crucial para identificar regi√µes que necessitam de 
                                    interven√ß√µes mais intensivas, ajudando a direcionar pol√≠ticas p√∫blicas e recursos de forma mais eficiente. </p>'''
            html_clusters += f'<img src="file:///{caminho_mapa}" alt="Screenshot">'
            html_clusters += f'<p class="legenda-mapa"> Figura 1 - Mapa Colorido Baseado na Varia√ß√£o de Valores da Vari√°vel Alvo </p>' 
        
        st.divider()

        st.subheader('An√°lise Estat√≠stica')

        dfmc = df.groupby(df.columns[0])[df.columns[-1]].apply(lambda x: x.mode().iloc[0]).reset_index()
        dfm = df.groupby(df.columns[0])[df.columns[3:]].apply(lambda x: x.mode().iloc[0]).reset_index()
        dfmc[dfmc.columns[-1]] = dfmc[dfmc.columns[-1]].round(2)

        st.markdown('''A tabela de estat√≠sticas fornece um resumo estat√≠stico descritivo da vari√°vel alvo para os munic√≠pios analisados. Os valores apresentados 
                    incluem a contagem de observa√ß√µes, m√©dia, desvio padr√£o, valores m√≠nimos e m√°ximos, bem como os percentis 25%, 50% 
                    (mediana) e 75%. Estas estat√≠sticas s√£o √∫teis para entender a distribui√ß√£o e a variabilidade entre os munic√≠pios.''')
        
        
        with st.expander('Visualizar Estat√≠sticas'):
            dfmc_copy = dfmc[dfmc.columns[-1]].describe().to_frame().T
            st.dataframe(dfmc_copy, column_config={
                'count': 'Contagem',
                'mean': 'M√©dia',
                'std': 'Desvio Padr√£o',
                'min': 'M√≠nimo',
                '25%': '1¬∞ Quartil',
                '50%': 'Mediana',
                '75%': '3¬∞ Quartil',
                'max': 'M√°ximo'
            })            
            st.info(f'Tabela 1 - Estat√≠sticas Descritivas da Vari√°vel Alvo')

        check_analise = st.checkbox('Gostaria de adicionar a An√°lise Estat√≠stica ao relat√≥rio?')
        if check_analise:
            html_clusters += '<h2> An√°lise Estat√≠stica </h2>'
            html_clusters += '''<p> A tabela de estat√≠sticas fornece um resumo estat√≠stico descritivo da vari√°vel alvo para os munic√≠pios analisados. Os valores apresentados 
                        incluem a contagem de observa√ß√µes, m√©dia, desvio padr√£o, valores m√≠nimos e m√°ximos, bem como os percentis 25%, 50% 
                        (mediana) e 75%. Estas estat√≠sticas s√£o √∫teis para entender a distribui√ß√£o e a variabilidade entre os munic√≠pios. </p>'''
            html_df = dfmc_copy.to_html(index=False)
            html_df += f'<p class="legenda-tabela"> Tabela 1 - Estat√≠sticas Descritivas da Vari√°vel Alvo </p>'
            html_clusters += html_df
            
        st.divider()

        st.subheader('Gr√°fico de Dispers√£o')
        st.markdown('''O gr√°fico de dispers√£o faz parte de uma an√°lise estat√≠stica mais ampla apresentada no relat√≥rio, que visa 
                        explorar a variabilidade e o desempenho geral dos munic√≠pios. Ele permite identificar quais munic√≠pios
                        apresentam desempenhos extremos, tanto positivos quanto negativos, e como os valores da nossa vari√°vel alvo est√£o dispersos
                        em rela√ß√£o √† media. Esta visualiza√ß√£o facilita uma identifica√ß√£o mais superficial das √°reas que necessitam de maior aten√ß√£o e recursos.''')
        
        
        with st.expander('Visualizar Gr√°fico de Dispers√£o'):
            opcoes = df.columns[3:].tolist()
            variavel = st.selectbox('Selecione a vari√°vel', opcoes, index= len(opcoes)-1)
            nome_variavel_padrao = df.columns[-1]
            st.markdown(f'Caso queira trocar a vari√°vel padr√£o, que √© "{nome_variavel_padrao}", sua vari√°vel de sa√≠da padr√£o, selecione uma nova vari√°vel e gere o gr√°fico de dispers√£o novamente.')
            # Create a scatterplot of the penultimate column
            fig = px.scatter(
                dfm.reset_index(),
                y=variavel,
                x=dfmc.columns[0],
                # size=dfmc.columns[-1],
                hover_name="Munic√≠pio",
                color=variavel,
                color_continuous_scale='icefire_r',
            )

            # Show the scatterplot in Streamlit
            st.plotly_chart(fig, use_container_width=True)
            st.info(f'Gr√°fico 1 - Gr√°fico de Dispers√£o da Distribui√ß√£o da Vari√°vel Selecionada por Munic√≠pio')
            fig.write_image("scatter_plot.png")
            caminho_atual = os.getcwd()
            caminho_grafico = os.path.join(caminho_atual,f"scatter_plot.png")

        check_grafico = st.checkbox('Gostaria de adicionar o gr√°fico de dispers√£o ao relat√≥rio?')
        if check_grafico:
            html_clusters += '<h2> Gr√°fico de Dispers√£o </h2>'
            html_clusters += '''<p> O gr√°fico de dispers√£o faz parte de uma an√°lise estat√≠stica mais ampla apresentada no relat√≥rio, que visa 
                            explorar a variabilidade e o desempenho geral dos munic√≠pios. Ele permite identificar quais munic√≠pios
                            apresentam desempenhos extremos, tanto positivos quanto negativos, e como os valores da nossa vari√°vel alvo est√£o dispersos
                            em rela√ß√£o √† media. Esta visualiza√ß√£o facilita uma identifica√ß√£o mais superficial das √°reas que necessitam de maior aten√ß√£o e recursos. </p>'''
            html_clusters += f'<img src="file:///{caminho_grafico}" alt="Screenshot">'
            html_clusters += f'<p class="legenda-tabela"> Gr√°fico 1 - Gr√°fico de Dispers√£o da Distribui√ß√£o da Vari√°vel Selecionada por Munic√≠pio </p>'

        html = html.replace('---===---', html_clusters)
        path = os.path.join(f"An√°lise Estat√≠stica Explorat√≥ria.pdf")
        weasyprint.HTML(string=html).write_pdf(path)

        st.divider()
        st.subheader('Gera√ß√£o de Relat√≥rio de An√°lise Estat√≠stica Explorat√≥ria')
        titulo_estatistica = st.text_input("**Informe o nome do relat√≥rio de An√°lise Estat√≠stica a ser gerado**", help='Esse nome ser√° utilizado no t√≠tulo do arquivo de PDF que ser√° gerado ao fim da aplica√ß√£o.')
        gerar_relatorio_estatistica = st.button('Clique aqui para gerar seu relat√≥rio de An√°lise Est√°tistica')
        if gerar_relatorio_estatistica:
            criar_capa('An√°lise Estat√≠stica')
            arquivos = ['capa.pdf', 'An√°lise Estat√≠stica Explorat√≥ria.pdf']
            juntar_pdfs(arquivos)
            add_cabecalho('An√°lise Estat√≠stica Explorat√≥ria.pdf')
            with open('An√°lise Estat√≠stica Explorat√≥ria.pdf', "rb") as f:
                    pdf_contents = f.read()

                # Baixar o PDF quando o bot√£o √© clicado
            b64 = base64.b64encode(pdf_contents).decode()
            locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
            data_atual = datetime.now()
            st.markdown(f'<a href="data:application/octet-stream;base64,{b64}" download="Relat√≥rio_Estat√≠stica_{titulo_estatistica}_{data_atual}.pdf"><button style="background-color: #008CBA; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Baixar Relat√≥rio de An√°lise Estat√≠stica</button></a>', unsafe_allow_html=True)

        
        st.divider()
        st.markdown('Voc√™ chegou ao fim da p√°gina de An√°lises Estat√≠stica Explorat√≥ria! Para prosseguir com a aplica√ß√£o, volte para o topo da p√°gina e clique em "An√°lise Por Grupos" para prosseguir at√© a pr√≥xima p√°gina.')